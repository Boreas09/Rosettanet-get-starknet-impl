{"version":3,"sources":["../node_modules/mipd/src/utils.ts","../node_modules/mipd/src/store.ts","../src/discovery/evm-wallets.ts","../node_modules/@wallet-standard/features/src/connect.ts","../node_modules/@wallet-standard/features/src/disconnect.ts","../node_modules/@wallet-standard/features/src/events.ts","../src/wallet-standard/evm-injected-wallet.ts"],"sourcesContent":["import type { EIP1193Provider } from './register.js'\nimport type {\n  EIP6963AnnounceProviderEvent,\n  EIP6963ProviderDetail,\n} from './types.js'\n\n////////////////////////////////////////////////////////////////////////////\n// Announce Provider\n\nexport type AnnounceProviderParameters = EIP6963ProviderDetail<\n  EIP1193Provider,\n  string\n>\nexport type AnnounceProviderReturnType = () => void\n\n/**\n * Announces an EIP-1193 Provider.\n */\nexport function announceProvider(\n  detail: AnnounceProviderParameters,\n): AnnounceProviderReturnType {\n  const event: CustomEvent<EIP6963ProviderDetail> = new CustomEvent(\n    'eip6963:announceProvider',\n    { detail: Object.freeze(detail) },\n  )\n\n  window.dispatchEvent(event)\n\n  const handler = () => window.dispatchEvent(event)\n  window.addEventListener('eip6963:requestProvider', handler)\n  return () => window.removeEventListener('eip6963:requestProvider', handler)\n}\n\n////////////////////////////////////////////////////////////////////////////\n// Request Providers\n\nexport type RequestProvidersParameters = (\n  providerDetail: EIP6963ProviderDetail,\n) => void\nexport type RequestProvidersReturnType = (() => void) | undefined\n\n/**\n * Watches for EIP-1193 Providers to be announced.\n */\nexport function requestProviders(\n  listener: RequestProvidersParameters,\n): RequestProvidersReturnType {\n  if (typeof window === 'undefined') return\n  const handler = (event: EIP6963AnnounceProviderEvent) =>\n    listener(event.detail)\n\n  window.addEventListener('eip6963:announceProvider', handler)\n\n  window.dispatchEvent(new CustomEvent('eip6963:requestProvider'))\n\n  return () => window.removeEventListener('eip6963:announceProvider', handler)\n}\n","import type { Rdns } from './register.js'\nimport type { EIP6963ProviderDetail } from './types.js'\nimport { requestProviders } from './utils.js'\n\nexport type Listener = (\n  providerDetails: readonly EIP6963ProviderDetail[],\n  meta?:\n    | {\n        added?: readonly EIP6963ProviderDetail[] | undefined\n        removed?: readonly EIP6963ProviderDetail[] | undefined\n      }\n    | undefined,\n) => void\n\nexport type Store = {\n  /**\n   * Clears the store, including all provider details.\n   */\n  clear(): void\n  /**\n   * Destroys the store, including all provider details and listeners.\n   */\n  destroy(): void\n  /**\n   * Finds a provider detail by its RDNS (Reverse Domain Name Identifier).\n   */\n  findProvider(args: { rdns: Rdns }): EIP6963ProviderDetail | undefined\n  /**\n   * Returns all provider details that have been emitted.\n   */\n  getProviders(): readonly EIP6963ProviderDetail[]\n  /**\n   * Resets the store, and emits an event to request provider details.\n   */\n  reset(): void\n  /**\n   * Subscribes to emitted provider details.\n   */\n  subscribe(\n    listener: Listener,\n    args?: { emitImmediately?: boolean | undefined } | undefined,\n  ): () => void\n\n  /**\n   * @internal\n   * Current state of listening listeners.\n   */\n  _listeners(): Set<Listener>\n}\n\nexport function createStore(): Store {\n  const listeners: Set<Listener> = new Set()\n  let providerDetails: readonly EIP6963ProviderDetail[] = []\n\n  const request = () =>\n    requestProviders((providerDetail) => {\n      if (\n        providerDetails.some(\n          ({ info }) => info.uuid === providerDetail.info.uuid,\n        )\n      )\n        return\n\n      providerDetails = [...providerDetails, providerDetail]\n      listeners.forEach((listener) =>\n        listener(providerDetails, { added: [providerDetail] }),\n      )\n    })\n  let unwatch = request()\n\n  return {\n    _listeners() {\n      return listeners\n    },\n    clear() {\n      listeners.forEach((listener) =>\n        listener([], { removed: [...providerDetails] }),\n      )\n      providerDetails = []\n    },\n    destroy() {\n      this.clear()\n      listeners.clear()\n      unwatch?.()\n    },\n    findProvider({ rdns }) {\n      return providerDetails.find(\n        (providerDetail) => providerDetail.info.rdns === rdns,\n      )\n    },\n    getProviders() {\n      return providerDetails\n    },\n    reset() {\n      this.clear()\n      unwatch?.()\n      unwatch = request()\n    },\n    subscribe(listener, { emitImmediately } = {}) {\n      listeners.add(listener)\n      if (emitImmediately) listener(providerDetails, { added: providerDetails })\n      return () => listeners.delete(listener)\n    },\n  }\n}\n","import { StarknetWindowObject } from '@starknet-io/types-js';\nimport { createStore } from 'mipd';\nimport { EthereumProvider } from '../types';\n\nexport async function EvmWindowObjectWithStarknetKeys(): Promise<StarknetWindowObject[]> {\n  let starknetWallets = [];\n\n  const store = await createStore();\n\n  const providers = await store.getProviders();\n\n  for (const wallet of providers) {\n    if (wallet.info.rdns === 'com.bitget.web3') {\n      wallet.info.name = 'Bitget Wallet via Rosettanet';\n    } else if (wallet.info.rdns === 'com.okex.wallet') {\n      wallet.info.name = 'OKX Wallet via Rosettanet';\n    }\n\n    const starkNetWallet = {\n      ...wallet.provider,\n      id: wallet.info.name,\n      name: wallet.info.name,\n      icon: wallet.info.icon,\n      version: wallet.info.icon,\n      on: wallet.provider.on,\n      off: wallet.provider.off,\n    };\n\n    starknetWallets.push(starkNetWallet);\n  }\n\n  return starknetWallets;\n}\n\nconst ETHEREUM_WALLET_KEYS = ['sendAsync', 'send', 'request'];\n\nexport function isEthereumWindowObject(wallet: unknown): wallet is EthereumProvider {\n  if (typeof wallet !== 'object' || wallet === null) return false;\n  return ETHEREUM_WALLET_KEYS.every((key) => key in wallet);\n}\n","import type { WalletAccount } from '@wallet-standard/base';\n\n/** Name of the feature. */\nexport const StandardConnect = 'standard:connect';\n/**\n * @deprecated Use {@link StandardConnect} instead.\n *\n * @group Deprecated\n */\nexport const Connect = StandardConnect;\n\n/**\n * `standard:connect` is a {@link \"@wallet-standard/base\".Wallet.features | feature} that may be implemented by a\n * {@link \"@wallet-standard/base\".Wallet} to allow the app to obtain authorization to use\n * {@link \"@wallet-standard/base\".Wallet.accounts}.\n *\n * @group Connect\n */\nexport type StandardConnectFeature = {\n    /** Name of the feature. */\n    readonly [StandardConnect]: {\n        /** Version of the feature implemented by the Wallet. */\n        readonly version: StandardConnectVersion;\n        /** Method to call to use the feature. */\n        readonly connect: StandardConnectMethod;\n    };\n};\n/**\n * @deprecated Use {@link StandardConnectFeature} instead.\n *\n * @group Deprecated\n */\nexport type ConnectFeature = StandardConnectFeature;\n\n/**\n * Version of the {@link StandardConnectFeature} implemented by a {@link \"@wallet-standard/base\".Wallet}.\n *\n * @group Connect\n */\nexport type StandardConnectVersion = '1.0.0';\n/**\n * @deprecated Use {@link StandardConnectVersion} instead.\n *\n * @group Deprecated\n */\nexport type ConnectVersion = StandardConnectVersion;\n\n/**\n * Method to call to use the {@link StandardConnectFeature}.\n *\n * @group Connect\n */\nexport type StandardConnectMethod = (input?: StandardConnectInput) => Promise<StandardConnectOutput>;\n/**\n * @deprecated Use {@link StandardConnectMethod} instead.\n *\n * @group Deprecated\n */\nexport type ConnectMethod = StandardConnectMethod;\n\n/**\n * Input for the {@link StandardConnectMethod}.\n *\n * @group Connect\n */\nexport interface StandardConnectInput {\n    /**\n     * By default, using the {@link StandardConnectFeature} should prompt the user to request authorization to accounts.\n     * Set the `silent` flag to `true` to request accounts that have already been authorized without prompting.\n     *\n     * This flag may or may not be used by the Wallet and the app should not depend on it being used.\n     * If this flag is used by the Wallet, the Wallet should not prompt the user, and should return only the accounts\n     * that the app is authorized to use.\n     */\n    readonly silent?: boolean;\n}\n/**\n * @deprecated Use {@link StandardConnectInput} instead.\n *\n * @group Deprecated\n */\nexport type ConnectInput = StandardConnectInput;\n\n/**\n * Output of the {@link StandardConnectMethod}.\n *\n * @group Connect\n */\nexport interface StandardConnectOutput {\n    /** List of accounts in the {@link \"@wallet-standard/base\".Wallet} that the app has been authorized to use. */\n    readonly accounts: readonly WalletAccount[];\n}\n/**\n * @deprecated Use {@link StandardConnectOutput} instead.\n *\n * @group Deprecated\n */\nexport type ConnectOutput = StandardConnectOutput;\n","/** Name of the feature. */\nexport const StandardDisconnect = 'standard:disconnect';\n/**\n * @deprecated Use {@link StandardDisconnect} instead.\n *\n * @group Deprecated\n */\nexport const Disconnect = StandardDisconnect;\n\n/**\n * `standard:disconnect` is a {@link \"@wallet-standard/base\".Wallet.features | feature} that may be implemented by a\n * {@link \"@wallet-standard/base\".Wallet} to allow the app to perform any cleanup work.\n *\n * This feature may or may not be used by the app and the Wallet should not depend on it being used.\n * If this feature is used by the app, the Wallet should perform any cleanup work, but should not revoke authorization\n * to use accounts previously granted through the {@link ConnectFeature}.\n *\n * @group Disconnect\n */\nexport type StandardDisconnectFeature = {\n    /** Name of the feature. */\n    readonly [StandardDisconnect]: {\n        /** Version of the feature implemented by the Wallet. */\n        readonly version: StandardDisconnectVersion;\n        /** Method to call to use the feature. */\n        readonly disconnect: StandardDisconnectMethod;\n    };\n};\n/**\n * @deprecated Use {@link StandardDisconnectFeature} instead.\n *\n * @group Deprecated\n */\nexport type DisconnectFeature = StandardDisconnectFeature;\n\n/**\n * Version of the {@link StandardDisconnectFeature} implemented by a Wallet.\n *\n * @group Disconnect\n */\nexport type StandardDisconnectVersion = '1.0.0';\n/**\n * @deprecated Use {@link StandardDisconnectVersion} instead.\n *\n * @group Deprecated\n */\nexport type DisconnectVersion = StandardDisconnectVersion;\n\n/**\n * Method to call to use the {@link StandardDisconnectFeature}.\n *\n * @group Disconnect\n */\nexport type StandardDisconnectMethod = () => Promise<void>;\n/**\n * @deprecated Use {@link StandardDisconnectMethod} instead.\n *\n * @group Deprecated\n */\nexport type DisconnectMethod = StandardDisconnectMethod;\n","import type { Wallet } from '@wallet-standard/base';\n\n/** Name of the feature. */\nexport const StandardEvents = 'standard:events';\n/**\n * @deprecated Use {@link StandardEvents} instead.\n *\n * @group Deprecated\n */\nexport const Events = StandardEvents;\n\n/**\n * `standard:events` is a {@link \"@wallet-standard/base\".Wallet.features | feature} that may be implemented by a\n * {@link \"@wallet-standard/base\".Wallet} to allow the app to add an event listener and subscribe to events emitted by\n * the Wallet when properties of the Wallet {@link StandardEventsListeners.change}.\n *\n * @group Events\n */\nexport type StandardEventsFeature = {\n    /** Name of the feature. */\n    readonly [StandardEvents]: {\n        /** Version of the feature implemented by the {@link \"@wallet-standard/base\".Wallet}. */\n        readonly version: StandardEventsVersion;\n        /** Method to call to use the feature. */\n        readonly on: StandardEventsOnMethod;\n    };\n};\n/**\n * @deprecated Use {@link StandardEventsFeature} instead.\n *\n * @group Deprecated\n */\nexport type EventsFeature = StandardEventsFeature;\n\n/**\n * Version of the {@link StandardEventsFeature} implemented by a {@link \"@wallet-standard/base\".Wallet}.\n *\n * @group Events\n */\nexport type StandardEventsVersion = '1.0.0';\n/**\n * @deprecated Use {@link StandardEventsVersion} instead.\n *\n * @group Deprecated\n */\nexport type EventsVersion = StandardEventsVersion;\n\n/**\n * Method to call to use the {@link StandardEventsFeature}.\n *\n * @param event    Event type to listen for. {@link StandardEventsListeners.change | `change`} is the only event type.\n * @param listener Function that will be called when an event of the type is emitted.\n *\n * @return\n * `off` function which may be called to remove the event listener and unsubscribe from events.\n *\n * As with all event listeners, be careful to avoid memory leaks.\n *\n * @group Events\n */\nexport type StandardEventsOnMethod = <E extends StandardEventsNames>(\n    event: E,\n    listener: StandardEventsListeners[E]\n) => () => void;\n/**\n * @deprecated Use {@link StandardEventsOnMethod} instead.\n *\n * @group Deprecated\n */\nexport type EventsOnMethod = StandardEventsOnMethod;\n\n/**\n * Types of event listeners of the {@link StandardEventsFeature}.\n *\n * @group Events\n */\nexport interface StandardEventsListeners {\n    /**\n     * Listener that will be called when {@link StandardEventsChangeProperties | properties} of the\n     * {@link \"@wallet-standard/base\".Wallet} have changed.\n     *\n     * @param properties Properties that changed with their **new** values.\n     */\n    change(properties: StandardEventsChangeProperties): void;\n}\n/**\n * @deprecated Use {@link StandardEventsListeners} instead.\n *\n * @group Deprecated\n */\nexport type EventsListeners = StandardEventsListeners;\n\n/**\n * Names of {@link StandardEventsListeners} that can be listened for.\n *\n * @group Events\n */\nexport type StandardEventsNames = keyof StandardEventsListeners;\n/**\n * @deprecated Use {@link StandardEventsNames} instead.\n *\n * @group Deprecated\n */\nexport type EventsNames = StandardEventsNames;\n\n/**\n * Properties of a {@link \"@wallet-standard/base\".Wallet} that {@link StandardEventsListeners.change | changed} with their\n * **new** values.\n *\n * @group Events\n */\nexport interface StandardEventsChangeProperties {\n    /**\n     * {@link \"@wallet-standard/base\".Wallet.chains | Chains} supported by the Wallet.\n     *\n     * The Wallet should only define this field if the value of the property has changed.\n     *\n     * The value must be the **new** value of the property.\n     */\n    readonly chains?: Wallet['chains'];\n    /**\n     * {@link \"@wallet-standard/base\".Wallet.features | Features} supported by the Wallet.\n     *\n     * The Wallet should only define this field if the value of the property has changed.\n     *\n     * The value must be the **new** value of the property.\n     */\n    readonly features?: Wallet['features'];\n    /**\n     * {@link \"@wallet-standard/base\".Wallet.accounts | Accounts} that the app is authorized to use.\n     *\n     * The Wallet should only define this field if the value of the property has changed.\n     *\n     * The value must be the **new** value of the property.\n     */\n    readonly accounts?: Wallet['accounts'];\n}\n/**\n * @deprecated Use {@link StandardEventsChangeProperties} instead.\n *\n * @group Deprecated\n */\nexport type EventsChangeProperties = StandardEventsChangeProperties;\n","import type { Wallet, WalletAccount, WalletWithFeatures } from '@wallet-standard/base';\nimport {\n  StandardConnect,\n  type StandardConnectFeature,\n  type StandardConnectMethod,\n  StandardDisconnect,\n  type StandardDisconnectFeature,\n  type StandardDisconnectMethod,\n  StandardEvents,\n  type StandardEventsFeature,\n  type StandardEventsOnMethod,\n} from '@wallet-standard/features';\nimport { EthereumRPCParams, EthereumProvider, RPCError, RPCResponse } from '../types';\n\n// Type definitions\ntype StandardEventsNames = 'change' | 'connect' | 'disconnect' | 'error';\n\ninterface StandardEventsListeners {\n  change: (data: { accounts: WalletAccount[] }) => void;\n  connect: () => void;\n  disconnect: () => void;\n  error: (error: Error) => void;\n}\n\nconst EthereumWalletApi = 'ethereum:wallet';\n\n// Ethereum specific types\ntype EthereumChain = `eip155:${string}`;\n\nexport type EthereumFeatures = EthereumWalletRequestFeature &\n  StandardConnectFeature &\n  StandardDisconnectFeature &\n  StandardEventsFeature;\nexport type WalletWithEthereumFeatures = WalletWithFeatures<EthereumFeatures>;\n\nexport type EthereumWalletRequestFeature = {\n  [EthereumWalletApi]: {\n    version: '1.0.0';\n    request: (args: EthereumRPCParams) => Promise<RPCError | RPCResponse>;\n  };\n};\n\n/**\n * Implementation of the Wallet Standard for Ethereum/EVM wallets\n */\nexport class EthereumInjectedWallet implements WalletWithEthereumFeatures {\n  #listeners: { [E in StandardEventsNames]?: StandardEventsListeners[E][] } = {};\n  #account: { address: string; chain: EthereumChain } | null = null;\n\n  constructor(private readonly injected: EthereumProvider) {\n    // Subscribe to EVM wallet events\n    this.injected.on('accountsChanged', (accounts: unknown) => {\n      if (Array.isArray(accounts) && accounts.every((a) => typeof a === 'string')) {\n        this.#onAccountsChanged(accounts);\n      } else {\n        console.warn('Unexpected accounts type:', accounts);\n      }\n    });\n    this.injected.on('networkChanged', (chainIdHex: unknown) => {\n      if (typeof chainIdHex === 'string') {\n        this.#onNetworkChanged(chainIdHex);\n      } else {\n        console.warn('Unexpected chainIdHex type:', chainIdHex);\n      }\n    });\n    this.injected.on('disconnect', this.#onDisconnect.bind(this));\n  }\n\n  get version() {\n    return '1.0.0' as const;\n  }\n\n  get name() {\n    return this.injected.name;\n  }\n\n  get icon() {\n    return this.injected.icon as Wallet['icon'];\n  }\n\n  get features(): EthereumFeatures {\n    return {\n      [StandardConnect]: {\n        version: '1.0.0' as const,\n        connect: this.#connect.bind(this),\n      },\n      [StandardDisconnect]: {\n        version: '1.0.0' as const,\n        disconnect: this.#disconnect.bind(this),\n      },\n      [StandardEvents]: {\n        version: '1.0.0' as const,\n        on: this.#on.bind(this),\n      },\n      [EthereumWalletApi]: {\n        version: '1.0.0' as const,\n        request: this.#request.bind(this),\n      },\n    };\n  }\n\n  get chains() {\n    return [\n      'eip155:1381192787', // Rosettanet Chain ID\n    ] as EthereumChain[];\n  }\n\n  get accounts(): WalletAccount[] {\n    if (this.#account) {\n      return [\n        {\n          address: this.#account.address,\n          publicKey: new Uint8Array(),\n          chains: [this.#account.chain],\n          features: [],\n        },\n      ];\n    }\n\n    return [];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  #connect: StandardConnectMethod = async ({ silent } = {}) => {\n    if (!this.#account) {\n      try {\n        // For EVM wallets\n        const accounts = await this.injected.request({\n          method: 'eth_requestAccounts',\n        });\n\n        // User rejected the request or no accounts\n        if (!accounts || accounts.length === 0) {\n          return { accounts: [] };\n        }\n\n        await this.#onAccountsChanged(accounts);\n      } catch (error) {\n        // Handle user rejection or errors\n        console.error('Connection error:', error);\n        return { accounts: [] };\n      }\n    }\n\n    return { accounts: this.accounts };\n  };\n\n  #disconnect: StandardDisconnectMethod = async () => {\n    // Most EVM wallets don't have a disconnect method\n    // We'll just clear our internal state\n    this.#disconnected();\n    return;\n  };\n\n  #on: StandardEventsOnMethod = <E extends StandardEventsNames>(\n    event: E,\n    listener: StandardEventsListeners[E]\n  ): (() => void) => {\n    if (!this.#listeners[event]) {\n      this.#listeners[event] = [];\n    }\n    (this.#listeners[event] as StandardEventsListeners[E][]).push(listener);\n\n    return () => {\n      this.#off(event, listener);\n    };\n  };\n\n  #emit<E extends StandardEventsNames>(\n    event: E,\n    ...args: Parameters<StandardEventsListeners[E]>\n  ): void {\n    if (!this.#listeners[event]) return;\n\n    for (const listener of this.#listeners[event] as StandardEventsListeners[E][]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      (listener as Function).apply(null, args);\n    }\n  }\n\n  #off<E extends StandardEventsNames>(event: E, listener: StandardEventsListeners[E]): void {\n    const arr = this.#listeners[event] as StandardEventsListeners[E][] | undefined;\n    if (!arr) return;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.#listeners[event] = arr.filter((l) => l !== listener) as any;\n  }\n\n  #disconnected() {\n    if (this.#account) {\n      this.#account = null;\n      this.#emit('change', { accounts: this.accounts });\n    }\n  }\n\n  async #onAccountsChanged(accounts: string[]) {\n    if (!accounts || accounts.length === 0) {\n      this.#disconnected();\n      return;\n    }\n\n    const [account] = accounts;\n\n    if (this.#account?.chain) {\n      // Only account changed, chain remains the same\n      this.#account.address = account;\n      this.#emit('change', { accounts: this.accounts });\n    } else {\n      // Need to get the chain ID too\n      const chain = await this.#getEthereumChain();\n      this.#account = { address: account, chain };\n      this.#emit('change', { accounts: this.accounts });\n    }\n  }\n\n  #onNetworkChanged(chainIdHex: string) {\n    if (!chainIdHex || !this.#account) {\n      this.#disconnected();\n      return;\n    }\n\n    // Convert hex chainId to decimal\n    const chainId = Number.parseInt(chainIdHex, 16).toString();\n    const chain = `eip155:${chainId}` as EthereumChain;\n\n    // Check if this is a supported chain\n    if (!this.chains.includes(chain)) {\n      console.warn('Switched to unsupported chain:', chain);\n    }\n\n    this.#account.chain = chain;\n    this.#emit('change', { accounts: this.accounts });\n  }\n\n  #onDisconnect() {\n    this.#disconnected();\n  }\n\n  #request(args: EthereumRPCParams): Promise<RPCError | RPCResponse> {\n    return this.injected.request(args);\n  }\n\n  async #getEthereumChain(): Promise<EthereumChain> {\n    try {\n      const chainIdHex = await this.injected.request({\n        method: 'eth_chainId',\n      });\n\n      // Inline check if chainIdHex is an RPCError\n      if (\n        chainIdHex &&\n        typeof chainIdHex === 'object' &&\n        'code' in chainIdHex &&\n        'message' in chainIdHex\n      ) {\n        console.error('RPC Error:', chainIdHex);\n        throw new Error(`RPC Error: ${chainIdHex.message}`);\n      }\n\n      // Convert hex to decimal\n      if (typeof chainIdHex === 'object' && 'result' in chainIdHex) {\n        const chainId = Number.parseInt(chainIdHex.result, 16).toString();\n        const chain = `eip155:${chainId}` as EthereumChain;\n        return chain;\n      } else {\n        throw new Error('Invalid Ethereum chain');\n      }\n    } catch (error) {\n      console.error('Failed to get chain ID:', error);\n      throw new Error('Invalid Ethereum chain');\n    }\n  }\n}\n"],"mappings":"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","names":[]}