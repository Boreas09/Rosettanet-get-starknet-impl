{"version":3,"sources":["../src/index.ts","../src/discovery/evm-wallets.ts","../src/wallet-standard/evm-injected-wallet.ts","../src/wallet-standard/features.ts","../src/utils/validateCallParams.ts","../src/types/index.ts"],"sourcesContent":["export * from './discovery/evm-wallets';\r\nexport * from './wallet-standard/evm-injected-wallet';\r\nexport * from './wallet-standard/features';\r\nexport * from './types/index';\r\n","import { StarknetWindowObject } from '@starknet-io/types-js';\r\nimport { createStore } from 'mipd';\r\nimport { EthereumProvider } from '../types';\r\nimport { EthereumInjectedWallet } from '../wallet-standard/evm-injected-wallet';\r\n\r\nexport async function EvmWindowObjectWithStarknetKeys() {\r\n  let Wallets = [];\r\n\r\n  const store = createStore();\r\n\r\n  const providers = store.getProviders();\r\n\r\n\r\n  for (const wallet of providers) {\r\n    if (wallet.info.rdns === 'com.bitget.web3') {\r\n      wallet.info.name = 'Bitget Wallet via Rosettanet';\r\n    } else if (wallet.info.rdns === 'com.okex.wallet') {\r\n      wallet.info.name = 'OKX Wallet via Rosettanet';\r\n    }\r\n\r\n    const walletWithStarknetKeys = {\r\n      ...wallet.provider,\r\n      id: wallet.info.name,\r\n      name: wallet.info.name,\r\n      icon: wallet.info.icon,\r\n      version: \"1.0.0\",\r\n      on: wallet.provider.on,\r\n      off: wallet.provider.removeListener,\r\n    } as StarknetWindowObject;\r\n\r\n    Wallets.push(new EthereumInjectedWallet(walletWithStarknetKeys));\r\n  }\r\n\r\n  return Wallets;\r\n}\r\n\r\nconst ETHEREUM_WALLET_KEYS = ['sendAsync', 'send', 'request'];\r\n\r\nexport function isEthereumWindowObject(wallet: unknown): wallet is EthereumProvider {\r\n  if (typeof wallet !== 'object' || wallet === null) return false;\r\n  return ETHEREUM_WALLET_KEYS.every((key) => key in wallet);\r\n}\r\n","import type { Wallet, WalletAccount, WalletWithFeatures } from '@wallet-standard/base';\r\nimport {\r\n  StandardConnect,\r\n  type StandardConnectMethod,\r\n  StandardDisconnect,\r\n  type StandardDisconnectMethod,\r\n  StandardEvents,\r\n  type StandardEventsOnMethod,\r\n  type StandardEventsNames,\r\n  type StandardEventsListeners,\r\n} from '@wallet-standard/features';\r\nimport {\r\n  RequestFn,\r\n  StarknetWindowObject,\r\n  RpcTypeToMessageMap,\r\n  RpcMessage,\r\n  RequestFnCall,\r\n} from '@starknet-io/types-js';\r\nimport {\r\n  EthereumWalletWithStarknetFeatures,\r\n  StarknetFeatures,\r\n  StarknetWalletApi,\r\n} from './features';\r\nimport { StarknetChain, EthereumChain } from '../types';\r\nimport { hash } from 'starknet';\r\nimport { prepareMulticallCalldata } from 'rosettanet';\r\nimport { validateCallParams } from '../utils/validateCallParams';\r\n\r\nconst walletToEthereumRpcMap: Record<keyof RpcTypeToMessageMap, string | undefined> = {\r\n  wallet_getPermissions: undefined,\r\n  wallet_requestAccounts: 'eth_requestAccounts',\r\n  wallet_watchAsset: 'wallet_watchAsset',\r\n  wallet_addStarknetChain: undefined,\r\n  wallet_switchStarknetChain: undefined,\r\n  wallet_requestChainId: 'eth_chainId',\r\n  wallet_deploymentData: undefined,\r\n  wallet_addInvokeTransaction: 'eth_sendTransaction',\r\n  wallet_addDeclareTransaction: undefined,\r\n  wallet_signTypedData: 'eth_signTypedData_v4',\r\n  wallet_supportedSpecs: undefined,\r\n  wallet_supportedWalletApi: undefined,\r\n};\r\n\r\n/**\r\n * Implementation of the Wallet Standard for Ethereum/EVM wallets\r\n */\r\nexport class EthereumInjectedWallet implements EthereumWalletWithStarknetFeatures {\r\n  #listeners: { [E in StandardEventsNames]?: StandardEventsListeners[E][] } = {};\r\n  #account: { address: string; chain: EthereumChain } | null = null;\r\n\r\n  constructor(private readonly injected: StarknetWindowObject) {\r\n    this.injected.on('accountsChanged', this.#onAccountsChanged.bind(this));\r\n    this.injected.on('networkChanged', this.#onNetworkChanged.bind(this));\r\n  }\r\n\r\n  get version() {\r\n    return '1.0.0' as const;\r\n  }\r\n\r\n  get name() {\r\n    return this.injected.name;\r\n  }\r\n\r\n  get icon() {\r\n    return this.injected.icon as Wallet['icon'];\r\n  }\r\n\r\n  get features(): StarknetFeatures {\r\n    return {\r\n      [StandardConnect]: {\r\n        version: '1.0.0' as const,\r\n        connect: this.#connect.bind(this),\r\n      },\r\n      [StandardDisconnect]: {\r\n        version: '1.0.0' as const,\r\n        disconnect: this.#disconnect.bind(this),\r\n      },\r\n      [StandardEvents]: {\r\n        version: '1.0.0' as const,\r\n        on: this.#on.bind(this),\r\n      },\r\n      [StarknetWalletApi]: {\r\n        version: '1.0.0' as const,\r\n        request: this.#request.bind(this),\r\n        walletVersion: this.injected.version,\r\n      },\r\n    };\r\n  }\r\n\r\n  get chains() {\r\n    return [\r\n      'eip155:1381192787', // Rosettanet Chain ID\r\n    ] as EthereumChain[];\r\n  }\r\n\r\n  get accounts(): WalletAccount[] {\r\n    if (this.#account) {\r\n      return [\r\n        {\r\n          address: this.#account.address,\r\n          publicKey: new Uint8Array(),\r\n          chains: [this.#account.chain],\r\n          features: [],\r\n        },\r\n      ];\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  #connect: StandardConnectMethod = async () => {\r\n    if (!this.#account) {\r\n      const accounts = await this.#request({\r\n        type: 'wallet_requestAccounts',\r\n      });\r\n\r\n      // User rejected the request.\r\n      if (accounts.length === 0) {\r\n        return { accounts: [] };\r\n      }\r\n\r\n      await this.#updateAccount(accounts);\r\n    }\r\n\r\n    return { accounts: this.accounts };\r\n  };\r\n\r\n  #disconnect: StandardDisconnectMethod = async () => {\r\n    // Most EVM wallets don't have a disconnect method\r\n    // We'll just clear our internal state\r\n    this.#disconnected();\r\n    return;\r\n  };\r\n\r\n  #on: StandardEventsOnMethod = (event, listener) => {\r\n    if (!this.#listeners[event]) {\r\n      this.#listeners[event] = [];\r\n    }\r\n\r\n    this.#listeners[event].push(listener);\r\n\r\n    return (): void => this.#off(event, listener);\r\n  };\r\n\r\n  #emit<E extends StandardEventsNames>(\r\n    event: E,\r\n    ...args: Parameters<StandardEventsListeners[E]>\r\n  ): void {\r\n    if (!this.#listeners[event]) return;\r\n\r\n    for (const listener of this.#listeners[event]) {\r\n      listener.apply(null, args);\r\n    }\r\n  }\r\n\r\n  #off<E extends StandardEventsNames>(event: E, listener: StandardEventsListeners[E]): void {\r\n    this.#listeners[event] = this.#listeners[event]?.filter(\r\n      (existingListener) => listener !== existingListener\r\n    );\r\n  }\r\n\r\n  #disconnected() {\r\n    if (this.#account) {\r\n      this.#account = null;\r\n      this.#emit('change', { accounts: this.accounts });\r\n    }\r\n  }\r\n\r\n  async #onAccountsChanged(accounts: string[] | undefined) {\r\n    if (!accounts || accounts.length === 0) {\r\n      this.#disconnected();\r\n      return;\r\n    }\r\n\r\n    if (!this.#account) {\r\n      return;\r\n    }\r\n\r\n    await this.#updateAccount(accounts);\r\n  }\r\n\r\n  #onNetworkChanged(chainIdHex: string | undefined) {\r\n    if (!chainIdHex || !this.#account) {\r\n      this.#disconnected();\r\n      return;\r\n    }\r\n\r\n    // Convert hex chainId to decimal\r\n    const chainId = Number.parseInt(chainIdHex, 16).toString();\r\n    const chain = `eip155:${chainId}` as EthereumChain;\r\n\r\n    // Check if this is a supported chain\r\n    if (!this.chains.includes(chain)) {\r\n      console.warn('Switched to unsupported chain:', chain);\r\n    }\r\n\r\n    this.#account.chain = chain;\r\n    this.#emit('change', { accounts: this.accounts });\r\n  }\r\n\r\n  async #updateAccount(accounts: string[]) {\r\n    if (accounts.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const [account] = accounts;\r\n\r\n    if (this.#account?.chain) {\r\n      // Only account changed, chain remains the same\r\n      this.#account.address = account;\r\n      this.#emit('change', { accounts: this.accounts });\r\n    } else {\r\n      // Need to get the chain ID too\r\n      const chain = await this.#getEthereumChain();\r\n      this.#account = { address: account, chain };\r\n      this.#emit('change', { accounts: this.accounts });\r\n    }\r\n  }\r\n\r\n  #request = async <T extends RpcMessage['type']>(\r\n    call: RequestFnCall<T>\r\n  ): Promise<RpcTypeToMessageMap[T]['result']> => {\r\n    const mappedMethod = walletToEthereumRpcMap[call.type];\r\n\r\n    if (!mappedMethod) {\r\n      throw new Error(`Unsupported request type: ${call.type}`);\r\n    }\r\n\r\n    if (mappedMethod === 'eth_sendTransaction' && call.params) {\r\n      if (validateCallParams(call.params) === false) {\r\n        throw new Error('Invalid call parameter. Expected an array of objects. Rosettanet only supports multicall.');\r\n      }\r\n\r\n      const arrayCalls: [string, string, string[]][] = call.params.map((item) => [\r\n        item.contractAddress,\r\n        item.entrypoint,\r\n        item.calldata,\r\n      ]);\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      const txCalls = [].concat(arrayCalls as any).map((it) => {\r\n        const entryPointValue = it[1] as string;\r\n        const entryPoint = entryPointValue.startsWith('0x')\r\n          ? entryPointValue\r\n          : hash.getSelectorFromName(entryPointValue);\r\n\r\n        return {\r\n          contract_address: it[0],\r\n          entry_point: entryPoint,\r\n          calldata: it[2],\r\n        };\r\n      });\r\n\r\n      const params = {\r\n        calls: txCalls,\r\n      };\r\n\r\n      const txData = prepareMulticallCalldata(params.calls);\r\n\r\n      const txObject = {\r\n        from: this.#account?.address,\r\n        to: '0x0000000000000000000000004645415455524553',\r\n        data: txData,\r\n        value: '0x0',\r\n      };\r\n\r\n      const ethPayload = {\r\n        method: mappedMethod,\r\n        params: [txObject],\r\n      };\r\n\r\n      return (this.injected.request as any)(ethPayload);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return (this.injected.request as any)({ method: mappedMethod, params: call.params ? [call.params] : [] });\r\n  };\r\n\r\n  async #getEthereumChain(): Promise<EthereumChain> {\r\n    const chainIdHex = await this.#request({\r\n      type: 'wallet_requestChainId',\r\n    });\r\n    // Convert hex to decimal\r\n    const chainId = Number.parseInt(chainIdHex, 16).toString();\r\n    const chain = `eip155:${chainId}` as EthereumChain;\r\n\r\n    // Check if the chain is rosettanet chain\r\n    if (chainId !== '1381192787') {\r\n      throw new Error('Invalid Rosettanet chain');\r\n    }\r\n\r\n    return chain;\r\n  }\r\n}\r\n","import type { Wallet } from '@wallet-standard/base';\r\nimport {\r\n  StandardConnect,\r\n  StandardDisconnect,\r\n  StandardEvents,\r\n  type StandardEventsFeature,\r\n  type StandardDisconnectFeature,\r\n  type StandardConnectFeature,\r\n} from '@wallet-standard/features';\r\nimport { RequestFn } from '@starknet-io/types-js';\r\nimport { WalletWithFeatures } from '@wallet-standard/base';\r\n\r\nexport const StarknetWalletApi = 'starknet:walletApi';\r\n\r\nexport type StarknetWalletApiVersion = '1.0.0';\r\n\r\nexport type StarknetWalletRequestFeature = {\r\n  readonly [StarknetWalletApi]: {\r\n    readonly version: StarknetWalletApiVersion;\r\n    readonly request: RequestFn;\r\n    readonly walletVersion: string;\r\n  };\r\n};\r\n\r\nexport type StarknetFeatures = StarknetWalletRequestFeature &\r\n  StandardConnectFeature &\r\n  StandardDisconnectFeature &\r\n  StandardEventsFeature;\r\nexport type EthereumWalletWithStarknetFeatures = WalletWithFeatures<StarknetFeatures>;\r\n\r\nconst RequiredStarknetFeatures = [\r\n  StarknetWalletApi,\r\n  StandardConnect,\r\n  StandardDisconnect,\r\n  StandardEvents,\r\n] as const satisfies (keyof StarknetFeatures)[];\r\n\r\nexport function isEVMWallet(wallet: Wallet): wallet is EthereumWalletWithStarknetFeatures {\r\n  const result = RequiredStarknetFeatures.every((feature) => feature in wallet.features);\r\n  return result;\r\n}\r\n","interface CallObject {\r\n    contractAddress: string;\r\n    entrypoint: string;\r\n    calldata: string[];\r\n}\r\n\r\nexport const validateCallParams = (value: any): value is CallObject[] => {\r\n    return Array.isArray(value) && value.every(item =>\r\n        typeof item === 'object' &&\r\n        item !== null &&\r\n        !Array.isArray(item) &&\r\n        'contractAddress' in item &&\r\n        'entrypoint' in item &&\r\n        'calldata' in item\r\n    );\r\n};","export interface EthereumProvider {\r\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  request(): Promise<any>;\r\n  id: string;\r\n  name: string;\r\n  icon: string;\r\n  version: string;\r\n  on: <T extends string>(eventName: T, listener: (...args: unknown[]) => void) => void;\r\n  off: <T extends string>(eventName: T, listener: (...args: unknown[]) => void) => void;\r\n}\r\n\r\nexport const ETHEREUM_CHAIN_PREFIX = 'eip155:';\r\n\r\nexport const STARKNET_CHAIN_PREFIX = 'starknet:';\r\n\r\nexport type ChainId = `0x${string}`;\r\n\r\nexport type EthereumChain = `${typeof ETHEREUM_CHAIN_PREFIX}${string}`;\r\n\r\nexport type StarknetChain = `${typeof STARKNET_CHAIN_PREFIX}${ChainId}`;\r\n"],"mappings":"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","names":["import_features"]}