{"version":3,"sources":["../src/discovery/evm-wallets.ts","../src/wallet-standard/evm-injected-wallet.ts"],"sourcesContent":["import { StarknetWindowObject } from '@starknet-io/types-js';\nimport { createStore } from 'mipd';\nimport { EthereumProvider } from '../types';\n\nexport async function EvmWindowObjectWithStarknetKeys(): Promise<StarknetWindowObject[]> {\n  let starknetWallets = [];\n\n  const store = await createStore();\n\n  const providers = await store.getProviders();\n\n  for (const wallet of providers) {\n    if (wallet.info.rdns === 'com.bitget.web3') {\n      wallet.info.name = 'Bitget Wallet via Rosettanet';\n    } else if (wallet.info.rdns === 'com.okex.wallet') {\n      wallet.info.name = 'OKX Wallet via Rosettanet';\n    }\n\n    const starkNetWallet = {\n      ...wallet.provider,\n      id: wallet.info.name,\n      name: wallet.info.name,\n      icon: wallet.info.icon,\n      version: wallet.info.icon,\n      on: wallet.provider.on,\n      off: wallet.provider.off,\n    };\n\n    starknetWallets.push(starkNetWallet);\n  }\n\n  return starknetWallets;\n}\n\nconst ETHEREUM_WALLET_KEYS = ['sendAsync', 'send', 'request'];\n\nexport function isEthereumWindowObject(wallet: unknown): wallet is EthereumProvider {\n  if (typeof wallet !== 'object' || wallet === null) return false;\n  return ETHEREUM_WALLET_KEYS.every((key) => key in wallet);\n}\n","import type { Wallet, WalletAccount, WalletWithFeatures } from '@wallet-standard/base';\nimport {\n  StandardConnect,\n  type StandardConnectFeature,\n  type StandardConnectMethod,\n  StandardDisconnect,\n  type StandardDisconnectFeature,\n  type StandardDisconnectMethod,\n  StandardEvents,\n  type StandardEventsFeature,\n  type StandardEventsOnMethod,\n} from '@wallet-standard/features';\nimport { EthereumRPCParams, EthereumProvider, RPCError, RPCResponse } from '../types';\n\n// Type definitions\ntype StandardEventsNames = 'change' | 'connect' | 'disconnect' | 'error';\n\ninterface StandardEventsListeners {\n  change: (data: { accounts: WalletAccount[] }) => void;\n  connect: () => void;\n  disconnect: () => void;\n  error: (error: Error) => void;\n}\n\nconst EthereumWalletApi = 'ethereum:wallet';\n\n// Ethereum specific types\ntype EthereumChain = `eip155:${string}`;\n\nexport type EthereumFeatures = EthereumWalletRequestFeature &\n  StandardConnectFeature &\n  StandardDisconnectFeature &\n  StandardEventsFeature;\nexport type WalletWithEthereumFeatures = WalletWithFeatures<EthereumFeatures>;\n\nexport type EthereumWalletRequestFeature = {\n  [EthereumWalletApi]: {\n    version: '1.0.0';\n    request: (args: EthereumRPCParams) => Promise<RPCError | RPCResponse>;\n  };\n};\n\n/**\n * Implementation of the Wallet Standard for Ethereum/EVM wallets\n */\nexport class EthereumInjectedWallet implements WalletWithEthereumFeatures {\n  #listeners: { [E in StandardEventsNames]?: StandardEventsListeners[E][] } = {};\n  #account: { address: string; chain: EthereumChain } | null = null;\n\n  constructor(private readonly injected: EthereumProvider) {\n    // Subscribe to EVM wallet events\n    this.injected.on('accountsChanged', (accounts: unknown) => {\n      if (Array.isArray(accounts) && accounts.every((a) => typeof a === 'string')) {\n        this.#onAccountsChanged(accounts);\n      } else {\n        console.warn('Unexpected accounts type:', accounts);\n      }\n    });\n    this.injected.on('networkChanged', (chainIdHex: unknown) => {\n      if (typeof chainIdHex === 'string') {\n        this.#onNetworkChanged(chainIdHex);\n      } else {\n        console.warn('Unexpected chainIdHex type:', chainIdHex);\n      }\n    });\n    this.injected.on('disconnect', this.#onDisconnect.bind(this));\n  }\n\n  get version() {\n    return '1.0.0' as const;\n  }\n\n  get name() {\n    return this.injected.name;\n  }\n\n  get icon() {\n    return this.injected.icon as Wallet['icon'];\n  }\n\n  get features(): EthereumFeatures {\n    return {\n      [StandardConnect]: {\n        version: '1.0.0' as const,\n        connect: this.#connect.bind(this),\n      },\n      [StandardDisconnect]: {\n        version: '1.0.0' as const,\n        disconnect: this.#disconnect.bind(this),\n      },\n      [StandardEvents]: {\n        version: '1.0.0' as const,\n        on: this.#on.bind(this),\n      },\n      [EthereumWalletApi]: {\n        version: '1.0.0' as const,\n        request: this.#request.bind(this),\n      },\n    };\n  }\n\n  get chains() {\n    return [\n      'eip155:1381192787', // Rosettanet Chain ID\n    ] as EthereumChain[];\n  }\n\n  get accounts(): WalletAccount[] {\n    if (this.#account) {\n      return [\n        {\n          address: this.#account.address,\n          publicKey: new Uint8Array(),\n          chains: [this.#account.chain],\n          features: [],\n        },\n      ];\n    }\n\n    return [];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  #connect: StandardConnectMethod = async ({ silent } = {}) => {\n    if (!this.#account) {\n      try {\n        // For EVM wallets\n        const accounts = await this.injected.request({\n          method: 'eth_requestAccounts',\n        });\n\n        // User rejected the request or no accounts\n        if (!accounts || accounts.length === 0) {\n          return { accounts: [] };\n        }\n\n        await this.#onAccountsChanged(accounts);\n      } catch (error) {\n        // Handle user rejection or errors\n        console.error('Connection error:', error);\n        return { accounts: [] };\n      }\n    }\n\n    return { accounts: this.accounts };\n  };\n\n  #disconnect: StandardDisconnectMethod = async () => {\n    // Most EVM wallets don't have a disconnect method\n    // We'll just clear our internal state\n    this.#disconnected();\n    return;\n  };\n\n  #on: StandardEventsOnMethod = <E extends StandardEventsNames>(\n    event: E,\n    listener: StandardEventsListeners[E]\n  ): (() => void) => {\n    if (!this.#listeners[event]) {\n      this.#listeners[event] = [];\n    }\n    (this.#listeners[event] as StandardEventsListeners[E][]).push(listener);\n\n    return () => {\n      this.#off(event, listener);\n    };\n  };\n\n  #emit<E extends StandardEventsNames>(\n    event: E,\n    ...args: Parameters<StandardEventsListeners[E]>\n  ): void {\n    if (!this.#listeners[event]) return;\n\n    for (const listener of this.#listeners[event] as StandardEventsListeners[E][]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      (listener as Function).apply(null, args);\n    }\n  }\n\n  #off<E extends StandardEventsNames>(event: E, listener: StandardEventsListeners[E]): void {\n    const arr = this.#listeners[event] as StandardEventsListeners[E][] | undefined;\n    if (!arr) return;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.#listeners[event] = arr.filter((l) => l !== listener) as any;\n  }\n\n  #disconnected() {\n    if (this.#account) {\n      this.#account = null;\n      this.#emit('change', { accounts: this.accounts });\n    }\n  }\n\n  async #onAccountsChanged(accounts: string[]) {\n    if (!accounts || accounts.length === 0) {\n      this.#disconnected();\n      return;\n    }\n\n    const [account] = accounts;\n\n    if (this.#account?.chain) {\n      // Only account changed, chain remains the same\n      this.#account.address = account;\n      this.#emit('change', { accounts: this.accounts });\n    } else {\n      // Need to get the chain ID too\n      const chain = await this.#getEthereumChain();\n      this.#account = { address: account, chain };\n      this.#emit('change', { accounts: this.accounts });\n    }\n  }\n\n  #onNetworkChanged(chainIdHex: string) {\n    if (!chainIdHex || !this.#account) {\n      this.#disconnected();\n      return;\n    }\n\n    // Convert hex chainId to decimal\n    const chainId = Number.parseInt(chainIdHex, 16).toString();\n    const chain = `eip155:${chainId}` as EthereumChain;\n\n    // Check if this is a supported chain\n    if (!this.chains.includes(chain)) {\n      console.warn('Switched to unsupported chain:', chain);\n    }\n\n    this.#account.chain = chain;\n    this.#emit('change', { accounts: this.accounts });\n  }\n\n  #onDisconnect() {\n    this.#disconnected();\n  }\n\n  #request(args: EthereumRPCParams): Promise<RPCError | RPCResponse> {\n    return this.injected.request(args);\n  }\n\n  async #getEthereumChain(): Promise<EthereumChain> {\n    try {\n      const chainIdHex = await this.injected.request({\n        method: 'eth_chainId',\n      });\n\n      // Inline check if chainIdHex is an RPCError\n      if (\n        chainIdHex &&\n        typeof chainIdHex === 'object' &&\n        'code' in chainIdHex &&\n        'message' in chainIdHex\n      ) {\n        console.error('RPC Error:', chainIdHex);\n        throw new Error(`RPC Error: ${chainIdHex.message}`);\n      }\n\n      // Convert hex to decimal\n      if (typeof chainIdHex === 'object' && 'result' in chainIdHex) {\n        const chainId = Number.parseInt(chainIdHex.result, 16).toString();\n        const chain = `eip155:${chainId}` as EthereumChain;\n        return chain;\n      } else {\n        throw new Error('Invalid Ethereum chain');\n      }\n    } catch (error) {\n      console.error('Failed to get chain ID:', error);\n      throw new Error('Invalid Ethereum chain');\n    }\n  }\n}\n"],"mappings":"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","names":[]}